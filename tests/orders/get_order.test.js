const crypto = require("crypto")

const request = require("supertest")
const SIMPLE_BOOKS_API_BASE_URL = "https://simple-books-api.glitch.me"

async function generateAccessToken() {
  const uniqueId = crypto.randomBytes(16).toString("hex")
  console.log(`Note: new uniqueId generated by crypto -> uniqueId="${uniqueId}"`)
  const body = {
    clientName: `${uniqueId}`,
    clientEmail: `${uniqueId}@email.com`,
  }

  const authResponse = await request(SIMPLE_BOOKS_API_BASE_URL)
    .post("/api-clients")
    .set("Content-Type", "application/json")
    .send(body)

  if (authResponse.status === 201) {
    console.log(`New accessToken "${authResponse.body.accessToken}" is successfully generated for client: ${JSON.stringify(body)}.`)
    return authResponse.body.accessToken
  } else {
    throw Error(
      `Failed to register API client. POST /api-clients responded with ${
        authResponse.status
      } ${JSON.stringify(authResponse.body)}`
    )
  }
}

describe("GET /orders/:orderId tests", () => {
  beforeAll(async function () {
    jest.setTimeout(15 * 1000)
  })

  test("should respond with an order", async () => {
    const accessToken = await generateAccessToken() 
    const neworder = await request(SIMPLE_BOOKS_API_BASE_URL)
      .post("/orders")
      .set("Authorization", `Bearer ${accessToken}`)
      .send({ bookId: 5 })
    if(neworder.status !== 201) {
      throw Error(`Failed to create an order for bookId=5 with status code: ${neworder.status}.`)
    }

    const response = await request(SIMPLE_BOOKS_API_BASE_URL)
      .get(`/orders/${neworder.body.orderId}`)
      .set("Authorization", `Bearer ${accessToken}`)
    expect(response.status).toEqual(200)
  })

  test("should respond with 404 not found when order with provided $orderId does not exists", async () => {
    const accessToken = await generateAccessToken() 
    const response = await request(SIMPLE_BOOKS_API_BASE_URL)
      .get("/orders/notrealorderid")
      .set("Authorization", `Bearer ${accessToken}`)
    expect(response.status).toEqual(404)
    expect(response.body).toMatchObject({
      error: "No order with id notrealorderid.",
    })
  })

  test("should respond with 401 unauthorized request when Authorization header is missing", async () => {
    const response = await request(SIMPLE_BOOKS_API_BASE_URL).get(
      "/orders/some_order_id"
    )
    expect(response.status).toEqual(401)
  })

  it("should respond with 401 unauthorized request when Authorization header contains invalid token", async () => {
    const response = await request(SIMPLE_BOOKS_API_BASE_URL)
      .get("/orders/some_order_id")
      .set("Authorization", `Bearer ivalidtoken`)
    expect(response.status).toEqual(401)
  })
})
